/*
  This file is part of web3x.

  web3x is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as published by
  the Free Software Foundation, either version 3 of the License, or
  (at your option) any later version.

  web3x is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public License
  along with web3x.  If not, see <http://www.gnu.org/licenses/>.
*/

import JSBI from 'jsbi';
import { abiCoder } from '.';
import { Address } from '../../address';

const address1 = Address.fromString('0x407d73d8a49eeb85d32cf465507dd71d507100c1');
const address2 = Address.fromString('0x407d73d8a49eeb85d32cf465507dd71d507100c2');
const address3 = Address.fromString('0x407d73d8a49eeb85d32cf465507dd71d507100c3');
const address4 = Address.fromString('0x407d73d8a49eeb85d32cf465507dd71d507100c4');
const address5 = Address.fromString('0xbbf289d846208c16edc8474705c748aff07732db');
const address6 = Address.fromString('0x1234567890123456789012345678901234567890');

describe('decodeParameter', () => {
  it('should decode string', () => {
    const result = abiCoder.decodeParameter(
      'string',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000008' +
        '48656c6c6f212521000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual('Hello!%!');
  });

  it('should decode unicode string', () => {
    const result = abiCoder.decodeParameter(
      'string',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000026' +
        '486565c3a4c3b6c3b6c3a4f09f9185443334c99dc9a33234d084cdbd2d2e2cc3' +
        'a4c3bc2b232f0000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual('Heeäööä👅D34ɝɣ24Єͽ-.,äü+#/');
  });

  it('should decode address', () => {
    const result = abiCoder.decodeParameter(
      'address',
      '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1',
    );
    expect(result).toEqual(address1);
  });

  it('should decode fixed size address array', () => {
    const result = abiCoder.decodeParameter(
      'address[2]',
      '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3',
    );
    expect(result).toEqual([address1, address3]);
  });

  it('should decode variable size address array', () => {
    const result = abiCoder.decodeParameter(
      'address[]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3',
    );
    expect(result).toEqual([address1, address3]);
  });

  it('should decode variable size array of fixed size address array', () => {
    const result = abiCoder.decodeParameter(
      'address[][2]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4',
    );
    expect(result).toEqual([[address1, address2], [address3, address4]]);
  });

  it('should decode fixed size array of variable size address array', () => {
    const result = abiCoder.decodeParameter(
      'address[2][]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c1' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c2' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c3' +
        '000000000000000000000000407d73d8a49eeb85d32cf465507dd71d507100c4',
    );
    expect(result).toEqual([[address1, address2], [address3, address4]]);
  });

  it('should decode true bool', () => {
    const result = abiCoder.decodeParameter('bool', '0000000000000000000000000000000000000000000000000000000000000001');
    expect(result).toEqual(true);
  });

  it('should decode false bool', () => {
    const result = abiCoder.decodeParameter('bool', '0000000000000000000000000000000000000000000000000000000000000000');
    expect(result).toEqual(false);
  });

  it('should decode fixed size bool array', () => {
    const result = abiCoder.decodeParameter(
      'bool[2]',
      '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual([true, false]);
  });

  it('should decode variable size bool array', () => {
    const result = abiCoder.decodeParameter(
      'bool[]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000003' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual([true, true, false]);
  });

  it('should decode int of 1', () => {
    const result = abiCoder.decodeParameter('int', '0000000000000000000000000000000000000000000000000000000000000001');
    expect(result).toEqual(JSBI.BigInt(1));
  });

  it('should decode int of 16', () => {
    const result = abiCoder.decodeParameter('int', '0000000000000000000000000000000000000000000000000000000000000010');
    expect(result).toEqual(JSBI.BigInt(16));
  });

  it('should decode int of -1', () => {
    const result = abiCoder.decodeParameter('int', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
    expect(result).toEqual(JSBI.BigInt(-1));
  });

  it('should decode int8 of 16', () => {
    const result = abiCoder.decodeParameter('int8', '0000000000000000000000000000000000000000000000000000000000000010');
    expect(result).toEqual(JSBI.BigInt(16));
  });

  it('should decode int32 of 16', () => {
    const result = abiCoder.decodeParameter(
      'int32',
      '0000000000000000000000000000000000000000000000000000000000000010',
    );
    expect(result).toEqual(JSBI.BigInt(16));
  });

  it('should decode int64 of 16', () => {
    const result = abiCoder.decodeParameter(
      'int64',
      '0000000000000000000000000000000000000000000000000000000000000010',
    );
    expect(result).toEqual(JSBI.BigInt(16));
  });

  it('should decode int128 of 16', () => {
    const result = abiCoder.decodeParameter(
      'int128',
      '0000000000000000000000000000000000000000000000000000000000000010',
    );
    expect(result).toEqual(JSBI.BigInt(16));
  });

  it('should decode int256 of 16', () => {
    const result = abiCoder.decodeParameter(
      'int256',
      '0000000000000000000000000000000000000000000000000000000000000010',
    );
    expect(result).toEqual(JSBI.BigInt(16));
  });

  it('should decode fixed size int8 array', () => {
    const result = abiCoder.decodeParameter(
      'int8[2]',
      '0000000000000000000000000000000000000000000000000000000000000010' +
        '0000000000000000000000000000000000000000000000000000000000000002',
    );
    expect(result).toEqual([JSBI.BigInt(16), JSBI.BigInt(2)]);
  });

  it('should decode empty variable size int array', () => {
    const result = abiCoder.decodeParameter(
      'int[]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual([]);
  });

  it('should decode variable size int array', () => {
    const result = abiCoder.decodeParameter(
      'int[]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000003' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '0000000000000000000000000000000000000000000000000000000000000003',
    );
    expect(result).toEqual([JSBI.BigInt(1), JSBI.BigInt(2), JSBI.BigInt(3)]);
  });

  it('should decode fixed size array of variable size int array', () => {
    const result = abiCoder.decodeParameter(
      'int[3][]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '0000000000000000000000000000000000000000000000000000000000000003' +
        '0000000000000000000000000000000000000000000000000000000000000004' +
        '0000000000000000000000000000000000000000000000000000000000000005' +
        '0000000000000000000000000000000000000000000000000000000000000006',
    );
    expect(result).toEqual([
      [JSBI.BigInt(1), JSBI.BigInt(2), JSBI.BigInt(3)],
      [JSBI.BigInt(4), JSBI.BigInt(5), JSBI.BigInt(6)],
    ]);
  });

  it('should decode uint of 1', () => {
    const result = abiCoder.decodeParameter('uint', '0000000000000000000000000000000000000000000000000000000000000001');
    expect(result).toEqual(JSBI.BigInt(1));
  });

  it('should decode uint of 16', () => {
    const result = abiCoder.decodeParameter('uint', '0000000000000000000000000000000000000000000000000000000000000010');
    expect(result).toEqual(JSBI.BigInt(16));
  });

  it('should decode max size uint', () => {
    const result = abiCoder.decodeParameter('uint', 'ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff');
    expect(result).toEqual(
      JSBI.BigInt('115792089237316195423570985008687907853269984665640564039457584007913129639935'),
    );
  });

  it('should decode 9 bytes', () => {
    const result = abiCoder.decodeParameter(
      'bytes',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000009' +
        '6761766f66796f726b0000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual('0x6761766f66796f726b');
  });

  it('should decode 32 bytes', () => {
    const result = abiCoder.decodeParameter(
      'bytes',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000020' +
        '731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b',
    );
    expect(result).toEqual('0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b');
  });

  it('should decode 64 bytes', () => {
    const result = abiCoder.decodeParameter(
      'bytes',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b' +
        '731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b',
    );
    expect(result).toEqual(
      '0x731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b' +
        '731a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b',
    );
  });

  it('should decode 96 bytes', () => {
    const result = abiCoder.decodeParameter(
      'bytes',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000060' +
        '131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b' +
        '231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b' +
        '331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b',
    );
    expect(result).toEqual(
      '0x131a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b' +
        '231a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b' +
        '331a3afc00d1b1e3461b955e53fc866dcf303b3eb9f4c16f89e388930f48134b',
    );
  });

  it('should decode fixed size bytes array', () => {
    const result = abiCoder.decodeParameter(
      'bytes[2]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000022' +
        '00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61' +
        '7fff000000000000000000000000000000000000000000000000000000000000' +
        '000000000000000000000000000000000000000000000000000000000000001e' +
        '21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff0000',
    );
    expect(result).toEqual([
      '0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff',
      '0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff',
    ]);
  });

  it('should decode variable size array of fixed size bytes array', () => {
    const result = abiCoder.decodeParameter(
      'bytes[][2]',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '0000000000000000000000000000000000000000000000000000000000000140' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000022' +
        '00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61' +
        '7fff000000000000000000000000000000000000000000000000000000000000' +
        '000000000000000000000000000000000000000000000000000000000000001e' +
        '21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff0000' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000022' +
        '00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f61' +
        '7fff000000000000000000000000000000000000000000000000000000000000' +
        '000000000000000000000000000000000000000000000000000000000000001e' +
        '21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff0000',
    );
    expect(result).toEqual([
      [
        '0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff',
        '0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff',
      ],
      [
        '0x00000c8c18f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff',
        '0x21f9252830fb3c56471c51335a8262f16a6d70e276417a7c7d897f617fff',
      ],
    ]);
  });

  it('should decode bytes1', () => {
    const result = abiCoder.decodeParameter(
      'bytes1',
      'cf00000000000000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual('0xcf');
  });

  it('should decode fixed size array of bytes1', () => {
    const result = abiCoder.decodeParameter(
      'bytes1[4]',
      'cf00000000000000000000000000000000000000000000000000000000000000' +
        '6800000000000000000000000000000000000000000000000000000000000000' +
        '4d00000000000000000000000000000000000000000000000000000000000000' +
        'fb00000000000000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual(['0xcf', '0x68', '0x4d', '0xfb']);
  });

  it('should decode bytes32', () => {
    const result = abiCoder.decodeParameter(
      'bytes32',
      '6761766f66796f726b0000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual('0x6761766f66796f726b0000000000000000000000000000000000000000000000');
  });

  it('should decode tuple(address)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(address)',
      '000000000000000000000000bbf289d846208c16edc8474705c748aff07732db',
    );
    expect(result).toEqual([address5]);
  });

  it('should decode tuple(address,address)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(address,address)',
      '000000000000000000000000bbf289d846208c16edc8474705c748aff07732db' +
        '000000000000000000000000bbf289d846208c16edc8474705c748aff07732db',
    );
    expect(result).toEqual([address5, address5]);
  });

  it('should decode tuple(uint256,uint256)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(uint256,uint256)',
      '0000000000000000000000000000000000000000000000000000000000000005' +
        '0000000000000000000000000000000000000000000000000000000000000005',
    );
    expect(result).toEqual([JSBI.BigInt(5), JSBI.BigInt(5)]);
  });

  it('should decode tuple(string,string)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(string,string)',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '0000000000000000000000000000000000000000000000000000000000000080' +
        '0000000000000000000000000000000000000000000000000000000000000005' +
        '68656c6c6f000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000005' +
        '776f726c64000000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual(['hello', 'world']);
  });

  it('should decode tuple(bytes,bytes)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(bytes,bytes)',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '0000000000000000000000000000000000000000000000000000000000000080' +
        '0000000000000000000000000000000000000000000000000000000000000007' +
        '01fe517acd15ff00000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000007' +
        'abcdef1234567800000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual(['0x01fe517acd15ff', '0xabcdef12345678']);
  });

  it('should decode tuple(bool,bool)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(bool,bool)',
      '0000000000000000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000001',
    );
    expect(result).toEqual([false, true]);
  });

  it('should decode tuple(uint256,string,bytes)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(uint256,string,bytes)',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000004' +
        '0000000000000000000000000000000000000000000000000000000000000060' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000009' +
        '7768617420776861740000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000007' +
        'abcdef1234567800000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual([JSBI.BigInt(4), 'what what', '0xabcdef12345678']);
  });

  it('should decode tuple(uint128,string,bytes)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(uint128,string,bytes)',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '000000000000000000000000000000000000000000000000000000000000029a' +
        '0000000000000000000000000000000000000000000000000000000000000060' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000010' +
        '656e636f646520796f7572206b69647300000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000010' +
        '656e636f646520796f7572207769666500000000000000000000000000000000',
    );
    expect(result).toEqual([JSBI.BigInt(666), 'encode your kids', '0x656e636f646520796f75722077696665']);
  });

  it('should decode tuple(string,bytes32,uint256,bool)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(string,bytes32,uint256,bool)',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000080' +
        'aabbccddeeff0000000000000000000000000000000000000000000000000000' +
        '0000000000000000000000000000000000000000000000000000000000000141' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000007' +
        '666f6f2062617200000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual([
      'foo bar',
      '0xaabbccddeeff0000000000000000000000000000000000000000000000000000',
      JSBI.BigInt(321),
      true,
    ]);
  });

  it('should decode tuple(uint8,uint8,uint8,uint8,string,address,bool)', () => {
    const result = abiCoder.decodeParameter(
      'tuple(uint8,uint8,uint8,uint8,string,address,bool)',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000002' +
        '0000000000000000000000000000000000000000000000000000000000000003' +
        '0000000000000000000000000000000000000000000000000000000000000004' +
        '00000000000000000000000000000000000000000000000000000000000000e0' +
        '0000000000000000000000000000000000000000000000000000000000000006' +
        '0000000000000000000000000000000000000000000000000000000000000001' +
        '0000000000000000000000000000000000000000000000000000000000000004' +
        '6669766500000000000000000000000000000000000000000000000000000000',
    );
    expect(result).toEqual([
      JSBI.BigInt(1),
      JSBI.BigInt(2),
      JSBI.BigInt(3),
      JSBI.BigInt(4),
      'five',
      Address.fromString('0x0000000000000000000000000000000000000006'),
      true,
    ]);
  });

  it('should decode tuple(tuple(address,address),tuple(uint256,uint256),tuple(string,string))', () => {
    const result = abiCoder.decodeParameter(
      'tuple(tuple(address,address),tuple(uint256,uint256),tuple(string,string))',
      '0000000000000000000000000000000000000000000000000000000000000020' +
        '0000000000000000000000001234567890123456789012345678901234567890' +
        '0000000000000000000000001234567890123456789012345678901234567890' +
        '0000000000000000000000000000000000000000000000000000000000000005' +
        '0000000000000000000000000000000000000000000000000000000000000006' +
        '00000000000000000000000000000000000000000000000000000000000000a0' +
        '0000000000000000000000000000000000000000000000000000000000000040' +
        '0000000000000000000000000000000000000000000000000000000000000080' +
        '0000000000000000000000000000000000000000000000000000000000000008' +
        '6120737472696e67000000000000000000000000000000000000000000000000' +
        '000000000000000000000000000000000000000000000000000000000000000e' +
        '616e6f7468657220737472696e67000000000000000000000000000000000000',
    );
    expect(result).toEqual([[address6, address6], [JSBI.BigInt(5), JSBI.BigInt(6)], ['a string', 'another string']]);
  });
});
